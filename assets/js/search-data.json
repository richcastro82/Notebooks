{
  
    
        "post0": {
            "title": "TAG MATRIX DATA SCRAPER",
            "content": "import pandas as pd import requests import datetime date=datetime.datetime.now().strftime(&quot;%Y-%m-%d&quot;) import dash import dash_core_components as dcc . CANADA STUFF . #SOURCE - https://github.com/eebrown/data2019nCoV df=pd.read_csv(&#39;https://raw.githubusercontent.com/eebrown/data2019nCoV/master/data-raw/covid19.csv&#39;) df=df.rename(columns={&#39;pruid&#39;:&#39;uid&#39;, &#39;prname&#39;:&#39;province&#39;}) col=[&#39;uid&#39;, &#39;province&#39;,&#39;date&#39;, &#39;numconf&#39;, &#39;numprob&#39;, &#39;numdeaths&#39;, &#39;numtotal&#39;, &#39;numtested&#39;, &#39;numrecover&#39;, &#39;percentrecover&#39;, &#39;ratetested&#39;, &#39;numtoday&#39;, &#39;percentoday&#39;, &#39;ratetotal&#39;, &#39;ratedeaths&#39;, &#39;numdeathstoday&#39;, &#39;percentdeath&#39;, &#39;numtestedtoday&#39;, &#39;numrecoveredtoday&#39;, &#39;percentactive&#39;, &#39;numactive&#39;, &#39;rateactive&#39;, &#39;numtotal_last14&#39;, &#39;ratetotal_last14&#39;, &#39;numdeaths_last14&#39;, &#39;ratedeaths_last14&#39;] df_ca=df[col] df_ca.set_index(&#39;date&#39;, inplace=True) df_ca.to_csv(&#39;../data/sources/canada/&#39;+date+&#39;-eeBrown.csv&#39;) . #SOURCE - https://www12.statcan.gc.ca/census-recensement/index-eng.cfm df=pd.read_csv(&#39;https://www12.statcan.gc.ca/census-recensement/2016/dp-pd/hlt-fst/pd-pl/Tables/CompFile.cfm?Lang=Eng&amp;T=301&amp;OFT=FULLCSV&#39;) df_cacen=df df_cacen.to_csv(&#39;../data/sources/canada/&#39;+date+&#39;-ca_census.csv&#39;) . #SOURCE - ISHABERRY #PROVINCE LEVEL CASE DATA df=pd.read_csv(&#39;https://raw.githubusercontent.com/ishaberry/Covid19Canada/master/timeseries_prov/cases_timeseries_prov.csv&#39;) df.rename(columns={&#39;date_report&#39;:&#39;date&#39;}, inplace=True) df.set_index(&#39;date&#39;) df_Isha=df df_Isha.to_csv(&#39;../data/sources/canada/&#39;+date+&#39;Isha_Prov_Cases.csv&#39;) . #SOURCE - ISHABERRY #HEALTH REGION LEVEL CASE DATA df=pd.read_csv(&#39;https://raw.githubusercontent.com/ishaberry/Covid19Canada/master/timeseries_hr/cases_timeseries_hr.csv&#39;) df.rename(columns={&#39;date_report&#39;:&#39;date&#39;}, inplace=True) df.set_index(&#39;date&#39;) df_Isha=df df_Isha.to_csv(&#39;../data/sources/canada/&#39;+date+&#39;Isha_HR_Cases.csv&#39;) . #SOURCE - ISHABERRY #PROVINCE LEVEL TEST DATA df=pd.read_csv(&#39;https://raw.githubusercontent.com/ishaberry/Covid19Canada/master/timeseries_prov/testing_timeseries_prov.csv&#39;) df.rename(columns={&#39;date_testing&#39;:&#39;date&#39;}, inplace=True) df.set_index(&#39;date&#39;) df_Isha=df df_Isha.to_csv(&#39;../data/sources/canada/&#39;+date+&#39;Isha_Province_Testing.csv&#39;) . World-o-Meter . #WORLD O METER DATA #NEW YORK COUNTY DATA import datetime date=datetime.datetime.now().strftime(&quot;%Y-%m-%d&quot;) web=requests.get(&#39;https://www.worldometers.info/coronavirus/usa/new-york&#39;) ny=pd.read_html(web.text) ny=ny[1] ny.columns=map(str.lower, ny.columns) ny.to_csv(&#39;../data/sources/worldometer/&#39;+date+&#39;-NY-County-Data.csv&#39;) #CALIFORNIA COUNTY DATA cad=requests.get(&#39;https://www.worldometers.info/coronavirus/usa/california&#39;) ca=pd.read_html(cad.text) ca=ca[1] ca.columns=map(str.lower, ca.columns) ca.to_csv(&#39;../data/sources/worldometer/&#39;+date+&#39;-CA-County-Data.csv&#39;) #NEW JERSEY COUNTY DATA njd=requests.get(&#39;https://www.worldometers.info/coronavirus/usa/new-jersey&#39;) nj=pd.read_html(njd.text) nj=nj[1] nj.columns=map(str.lower, nj.columns) nj.to_csv(&#39;../data/sources/worldometer/&#39;+date+&#39;-NJ-County-Data.csv&#39;) #OHIO COUNTY DATA ohd=requests.get(&#39;https://www.worldometers.info/coronavirus/usa/ohio/&#39;) oh=pd.read_html(ohd.text) oh=oh[1] oh.columns=map(str.lower, oh.columns) oh.to_csv(&#39;../data/sources/worldometer/&#39;+date+&#39;-OH-County-Data.csv&#39;) #SOUTH CAROLINA COUNTY DATA scd=requests.get(&#39;https://www.worldometers.info/coronavirus/usa/south-carolina/&#39;) sc=pd.read_html(scd.text) sc=sc[1] sc.columns=map(str.lower, sc.columns) sc.to_csv(&#39;../data/sources/worldometer/&#39;+date+&#39;-SC-County-Data.csv&#39;) #PA COUNTY DATA pad=requests.get(&#39;https://www.worldometers.info/coronavirus/usa/pennsylvania/&#39;) pa=pd.read_html(pad.text) pa=pa[1] pa.columns=map(str.lower, pa.columns) pa.to_csv(&#39;../data/sources/worldometer/&#39;+date+&#39;-PA-County-Data.csv&#39;) #WASHINGTON COUNTY DATA wad=requests.get(&#39;https://www.worldometers.info/coronavirus/usa/washington/&#39;) wa=pd.read_html(wad.text) wa=wa[1] wa.columns=map(str.lower, wa.columns) wa.to_csv(&#39;../data/sources/worldometer/&#39;+date+&#39;-WA-County-Data.csv&#39;) #US STATE LEVEL DATA we=requests.get(&#39;https://www.worldometers.info/coronavirus/country/us/&#39;) us=pd.read_html(we.text) us=us[1] us.to_csv(&#39;../data/sources/worldometer/&#39;+date+&#39;-US-State-Data.csv&#39;) . rt live . rtlive=pd.read_csv(&#39;https://d14wlfuexuxgcm.cloudfront.net/covid/rt.csv&#39;) rtlive.to_csv(&#39;../_data/data_sources/rtlive/rtlive&#39;+date+&#39;.csv&#39;) . Mobility Reports . Google Mobility Reports | Apple Mobility Reports | . #GOOGLE AND APPLE MOBILITY DATA BY COUNTY #apple=pd.read_csv(&#39;https://covid19-static.cdn-apple.com/covid19-mobility-data/2014HotfixDev8/v3/en-us/applemobilitytrends-2020-08-08.csv&#39;) #apple.to_csv(&#39;../_data/Data_Sources/Mobility_Reports/apple.csv&#39;) google=pd.read_csv(&#39;https://www.gstatic.com/covid19/mobility/Global_Mobility_Report.csv&#39;) google.to_csv(&#39;../_data/Data_Sources/google/google.csv&#39;) . WORLD-O-METER DATASETS . NEW YORK CALIFORNIA NEW JERSEY PA SOUTH CAROLINA OHIO WASHINGTON STATE &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; healthDepartment=requests.get(&#39;https://data.ct.gov/Health-and-Human-Services/COVID-19-Tests-Cases-and-Deaths-By-Town-/28fr-iqnx/data&#39;) hd=pd.read_html(healthDepartment.text) . COUNTY HEALTH DEPARTMANT DATASETS . #HEALTH DEPARTMENTS DATA flData=pd.read_csv(&#39;https://opendata.arcgis.com/datasets/222c9d85e93540dba523939cfb718d76_0.csv?outSR=%7B%22latestWkid%22%3A4326%2C%22wkid%22%3A4326%7D&#39;) flData.to_csv(&#39;../_data/Data_Sources/Fl-Data.csv&#39;) miData=pd.read_excel(&#39;https://www.michigan.gov/documents/coronavirus/Covid-19_Tests_by_County_2020-08-08_698830_7.xlsx&#39;) miData.to_csv(&#39;../_data/Data_Sources/Health-Department-Data/MI-Tests-County.csv&#39;) miData2=pd.read_excel(&#39;https://www.michigan.gov/documents/coronavirus/Cases_by_County_and_Date_2020-08-08_698828_7.xlsx&#39;) miData2.to_csv(&#39;../_data/Data_Sources/Health-Department-Data/MI-Cases-County.csv&#39;) miData3=pd.read_excel(&#39;https://www.michigan.gov/documents/coronavirus/Cases_and_Deaths_by_County_2020-08-08_698827_7.xlsx&#39;) miData3.to_csv(&#39;../_data/Data_Sources/Health-Department-Data/MI-Deaths-Cases-County.csv&#39;) miData4=pd.read_csv(&#39;https://raw.githubusercontent.com/jeffcore/covid-19-usa-by-state/master/COVID-19-Cases-USA-By-County.csv&#39;) miData4.to_csv(&#39;../_data/Data_Sources/Health-Department-Data/COVID-19-Cases-USA-By-County.csv&#39;) miData5=pd.read_csv(&#39;https://raw.githubusercontent.com/jeffcore/covid-19-usa-by-state/master/COVID-19-Deaths-USA-By-County.csv&#39;) miData5.to_csv(&#39;../_data/Data_Sources/Health-Department-Data/COVID-19-Deaths-USA-By-County.csv&#39;) miData6=pd.read_csv(&#39;https://raw.githubusercontent.com/jeffcore/covid-19-usa-by-state/master/COVID-19-Cases-USA-By-State.csv&#39;) miData6.to_csv(&#39;../_data/Data_Sources/Health-Department-Data/COVID-19-Cases-USA-By-State.csv&#39;) miData7=pd.read_csv(&#39;https://raw.githubusercontent.com/jeffcore/covid-19-usa-by-state/master/COVID-19-Deaths-USA-By-State.csv&#39;) miData7.to_csv(&#39;../_data/Data_Sources/Health-Department-Data/COVID-19-Deaths-USA-By-State.csv&#39;) . #ANOTHER MODULE from bs4 import BeautifulSoup url=requests.get(&#39;https://covidactnow.org/us/fl/county/taylor_county?s=846164&#39;) soup = BeautifulSoup(requests.get(url).text) soup.findAll(&quot;table&quot;)[0].findAll(&quot;tr&quot;)[0] . COVID TRACKER DATA . #COVID TRACKER DATA da1=pd.read_html(&#39;https://covidtracking.com/data/state/alabama&#39;) da1[1].to_csv(&#39;../_data/Data_Sources/CovidTracker/Alabama.csv&#39;) da2=pd.read_html(&#39;https://covidtracking.com/data/state/alaska&#39;) da2[1].to_csv(&#39;../_data/Data_Sources/CovidTracker/Alaska.csv&#39;) da3=pd.read_html(&#39;https://covidtracking.com/data/state/arizona&#39;) da3[1].to_csv(&#39;../_data/Data_Sources/CovidTracker/Arizona.csv&#39;) AR_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/arkansas&#39;) AR_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-ARKANSAS.csv&#39;) CA_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/california&#39;) CA_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-CALIFORNIA.csv&#39;) GA_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/GEORGIA&#39;) GA_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-GEORGIA.csv&#39;) KS_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/KANSAS&#39;) KS_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-KANSAS.csv&#39;) FL_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/FLORIDA&#39;) FL_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-FLORIDA.csv&#39;) IL_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/ILLINOIS&#39;) IL_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-ILLINOIS.csv&#39;) OH_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/OHIO&#39;) OH_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-OHIO.csv&#39;) TN_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/TENNESSEE&#39;) TN_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-TENNESSEE.csv&#39;) NE_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/NEBRASKA&#39;) NE_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-NEBRASKA.csv&#39;) PA_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/PENNSYLVANIA&#39;) PA_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-PENNSYLVANIA.csv&#39;) NC_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/NORTH-CAROLINA&#39;) NC_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-NORTHCAROLINA.csv&#39;) KY_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/KENTUCKY&#39;) KY_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-KENTUCKY.csv&#39;) CO_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/COLORADO&#39;) CO_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-COLORADO.csv&#39;) KS_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/KENTUCKY&#39;) KS_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-KENTUCKY.csv&#39;) NJ_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/NEW-JERSEY&#39;) NJ_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-NEWJERSEY.csv&#39;) MN_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/MINNESOTA&#39;) MN_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-MINNESOTA.csv&#39;) MI_COVIDTRACKER=pd.read_html(&#39;https://covidtracking.com/data/state/MICHIGAN&#39;) MI_COVIDTRACKER[1].to_csv(&#39;../_data/data_sources/covidtracker/&#39;+date+&#39;-MICHIGAN.csv&#39;) . NEW YORK TIMES DATA . #NEW YORK TIMES DATA MASK_NYT=pd.read_csv(&#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/mask-use/mask-use-by-county.csv&#39;) MASK_NYT.to_csv(&#39;../_data/data_sources/NYT/MASKUSAGE-&#39;+date+&#39;.csv&#39;) CASESDEATHSC_NYT=pd.read_csv(&#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv&#39;) CASESDEATHSC_NYT.to_csv(&#39;../_data/data_sources/NYT/CASES-DEATHS-COUNTY-&#39;+date+&#39;.csv&#39;) CASESDEATHS_NYT=pd.read_csv(&#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv&#39;) CASESDEATHS_NYT.to_csv(&#39;../_data/data_sources/NYT/CASES-DEATHS-STATE-&#39;+date+&#39;.csv&#39;) CASESDEATHSCD_NYT=pd.read_csv(&#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/live/us-counties.csv&#39;) CASESDEATHSCD_NYT.to_csv(&#39;../_data/data_sources/NYT/CASES-DEATHS-COUNTY-DAILY-&#39;+date+&#39;.csv&#39;) CASESDEATHSD_NYT=pd.read_csv(&#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/live/us-states.csv&#39;) CASESDEATHSD_NYT.to_csv(&#39;../_data/data_sources/NYT/CASES-DEATHS-STATE-DAILY-&#39;+date+&#39;.csv&#39;) EXDEATHS_NYT=pd.read_csv(&#39;https://raw.githubusercontent.com/nytimes/covid-19-data/master/excess-deaths/deaths.csv&#39;) EXDEATHS_NYT.to_csv(&#39;../_data/data_sources/NYT/EXCESS-DEATHS-CITY-&#39;+date+&#39;.csv&#39;) . linlab . LINLAB=pd.read_csv(&#39;https://raw.githubusercontent.com/lin-lab/COVID19-Viz/master/clean_data/rt_table_export.csv&#39;) LINLAB.to_csv(&#39;../_data/data_sources/LINLAB/RTCOUNTYLEVEL-&#39;+date+&#39;.csv&#39;) . wew=requests.get(&#39;https://www.geonames.org/statistics/&#39;) us=pd.read_html(wew.text) us[1].to_csv(&#39;../_data/data_sources/worldCountryPopulations.csv&#39;) . &lt;/div&gt; | | | | | | | .",
            "url": "https://richcastro82.github.io/Notebooks/matrix/2020/12/26/Matrix-Data-Scrapper.html",
            "relUrl": "/matrix/2020/12/26/Matrix-Data-Scrapper.html",
            "date": " • Dec 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://richcastro82.github.io/Notebooks/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://richcastro82.github.io/Notebooks/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://richcastro82.github.io/Notebooks/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}